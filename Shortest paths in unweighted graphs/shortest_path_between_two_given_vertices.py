# -*- coding: utf-8 -*-
"""shortest_path_between_two_given_vertices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KFVq3RU9mkSNekYEX6WMJfiYWDPf2h80

**Author: Shekoofeh Nekooei Rizi**

This program computes the shortest path and its length between two given vertices in an undirected/unweighted graph.

(The vertices are represented by integer numbers, and the given list of edges constructs the graph.)

I implement Breadth First Search for this purpose.

For illustration, I include some toy examples, as well as an example using a big dataset.

This dataset can be found here:

http://snap.stanford.edu/data/github-social.html
"""

from collections import deque

def shortest_path(u, v, n, edges):
    graph = {v:[] for v in range(n+1)}
    for e in edges:
        graph[e[0]].append(e[1])
        graph[e[1]].append(e[0])

    infinity = float('inf')
    dist = [infinity] * (n+1)
    dist[u] = 0

    parent = [None] * (n+1)

    Q = deque()
    Q.append(u)

    visited = set()
    visited.add(u)

    while Q:
        current_node = Q.popleft()
        for neighbor in graph[current_node]:
            if neighbor not in visited:
                visited.add(neighbor)
                dist[neighbor] = dist[current_node] + 1
                parent[neighbor] = current_node
                Q.append(neighbor)
                if neighbor == v:
                    Q.clear()
                    break

    if v not in visited:
        return infinity, None

    vertex = v
    path = []
    while vertex is not None:
        path.append(vertex)
        vertex = parent[vertex]

    path.reverse()

    return dist[v], path

"""### **Sample Tests**"""

n = 5
edges = [[0,1] , [1,2], [2,3], [3,4], [4,5]]
u = 5
v = 1
d, path = shortest_path(5, 1, n, edges)

print((d, path))
print("\nShortest distance between vertices " + str(u) + " and " + str(v) + " is  " + str(d) + ".")
print("The path is: " + str(path))

n = 4
edges = [[1,2], [1,3], [1,4], [2,3]]
u = 4
v = 3
shortest_path(u, v, n, edges)

n = 5
edges = [[5,2], [1,3], [3,4], [1,4]]
shortest_path(3, 5, n, edges)

"""#### **Sample Test with big data.**
The input is read from the file.

This sample represents a graph with 37700 nodes and 289003 edges.
"""

def read_input_file(file_name):
    biggest_vertex_number = 0
    edges = []
    with open(file_name, 'r') as file:
        for line in file:
            u, v = map(int, line.split())
            edges.append([u,v])
            biggest_vertex_number = max(biggest_vertex_number, u, v)
    return biggest_vertex_number, edges

n, edges = read_input_file("input_sample_Huge.txt")

u = 1
v = 2599
shortest_path(u, v, n, edges)

u = 7285
v = 37600
shortest_path(u, v, n, edges)